@page "/register"
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager NavigationManager

<h3>Register</h3>

<EditForm Model="@model" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" @bind-Value="model.Email" class="form-control" />
        <ValidationMessage For="@(() => model.Email)" />
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <InputText id="password" @bind-Value="model.Password" class="form-control" type="password" />
        <ValidationMessage For="@(() => model.Password)" />
    </div>

    <div class="form-group">
        <label for="confirmPassword">Confirm Password:</label>
        <InputText id="confirmPassword" @bind-Value="model.ConfirmPassword" class="form-control" type="password" />
        <ValidationMessage For="@(() => model.ConfirmPassword)" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-info mt-3">@message</div>
}

@code {
    private RegisterModel model = new RegisterModel();
    private string message = string.Empty;

    private async Task HandleRegistration()
    {
        var user = new IdentityUser { UserName = model.Email, Email = model.Email };
        var result = await UserManager.CreateAsync(user, model.Password);

        if (result.Succeeded)
        {
            message = "Registered successfully!";
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            message = "Registration failed. Errors: " + string.Join(", ", result.Errors.Select(e => e.Description));
        }
    }

    public class RegisterModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; }
    }
}